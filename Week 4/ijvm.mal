# 
# Extensions to MAL:
# ------------------
#
# - absolute labels; the syntax for labels have been extended to
#     allow for absolute placement of instructions, as required
#     by the implementation of IJVM.  To have an instruction
#     placed e.g. at address 0x2A, write:
#
#         imul = 0x2A:
#                 MAR = SP = SP - 1; rd
#                 ...
#     
#     The micro code immediately following is guaranteed to be
#     placed at address 0x2A, provided it does not collide with
#     other absolute labels.  The label `imul' will also serve as
#     a target for both conditional and unconditional gotos.
#
# - nop instruction; since the assembler ignores blank lines, a
#     means to instruct the assembler to generate an empty cycle
#     is needed.  This is used in the implementation of pop and
#     ireturn. More specifically, in the control word generated
#     by nop, NEXT_ADDRESS points to the following instruction,
#     the JAM field is 0, the ALU operation is unspecified, all C
#     and memory bits are 0 and B is unspecified. 
#

#
# Wed Apr 21 19:48:26 CEST 1999
# -----------------------------
#
#     Okay, "nop" is not a clever name since it is a java bytecode.
#     How about "empty"?  But what about the label "goto"?
#

	goto mic1_entry	

main:
	PC = PC + 1; fetch; goto (MBR)

nop = 0x00:
	goto main

iadd = 0x60:
	MAR = SP = SP - 1; rd
	H = TOS
	MDR = TOS = MDR + H; wr; goto main

isub = 0x64:
	MAR = SP = SP - 1; rd
	H = TOS
	MDR = TOS = MDR - H; wr; goto main

iand = 0x7E:
	MAR = SP = SP - 1; rd
	H = TOS
	MDR = TOS = MDR AND H; wr; goto main

ior = 0x80:
	MAR = SP = SP - 1; rd
	H = TOS
	MDR = TOS = MDR OR H; wr; goto main

dup = 0x59:
	MAR = SP = SP + 1
	MDR = TOS; wr; goto main

pop = 0x57:
	MAR = SP = SP - 1; rd
	empty
	TOS = MDR; goto main

swap = 0x5F:
	MAR = SP - 1; rd
	MAR = SP
	H = MDR; wr
	MDR = TOS
	MAR = SP - 1; wr
	TOS = H; goto main

bipush = 0x10:
	SP = MAR = SP + 1
	PC = PC + 1; fetch
	MDR = TOS = MBR; wr; goto main

iload = 0x15:
	H = LV
	MAR = MBRU + H; rd
iload_cont:
	MAR = SP = SP + 1
	PC = PC + 1; fetch; wr
	TOS = MDR; goto main

istore = 0x36:
	H = LV
	MAR = MBRU + H
istore_cont:
	MDR = TOS; wr
	SP = MAR = SP - 1; rd
	PC = PC + 1; fetch
	TOS = MDR; goto main

wide = 0xC4:
	PC = PC + 1; fetch; goto (MBR OR 0x100)

wide_iload = 0x115:
	PC = PC + 1; fetch
	H = MBRU << 8
	H = MBRU OR H
	MAR = LV + H; rd; goto iload_cont

wide_istore = 0x136:
	PC = PC + 1; fetch
	H = MBRU << 8
	H = MBRU OR H
	MAR = LV + H; goto istore_cont

ldc_w = 0x13:
	PC = PC + 1; fetch
	H = MBRU << 8
	H = MBRU OR H
	MAR = H + CPP; rd; goto iload_cont

iinc = 0x84:
	H = LV
	MAR = MBRU + H; rd
	PC = PC + 1; fetch
	H = MDR
	PC = PC + 1; fetch
	MDR = MBR + H; wr; goto main

ijvm_goto = 0xA7:
	OPC = PC - 1
goto_cont:
	PC = PC + 1; fetch
	H = MBR << 8
	H = MBRU OR H
	PC = OPC + H; fetch
	goto main

iflt = 0x9B:
	MAR = SP = SP - 1; rd
	OPC = TOS
	TOS = MDR
	N = OPC; if (N) goto T; else goto F

ifeq = 0x99:
	MAR = SP = SP - 1; rd
	OPC = TOS
	TOS = MDR
	Z = OPC; if (Z) goto T; else goto F

if_icmpeq = 0x9F:
	MAR = SP = SP - 1; rd
	MAR = SP = SP - 1
	H = MDR; rd
	OPC = TOS
	TOS = MDR
	Z = OPC - H; if (Z) goto T; else goto F

T:
	OPC = PC - 1; fetch; goto goto_cont

F:
	PC = PC + 1
	PC = PC + 1; fetch
	goto main

invokevirtual = 0xB6:
	PC = PC + 1; fetch
	H = MBRU << 8
	H = MBRU OR  H
mic1_entry:
	MAR = CPP + H; rd
	OPC = PC + 1
	PC = MDR; fetch
	PC = PC + 1; fetch
	H = MBRU << 8
	H = MBRU OR H
	PC = PC + 1; fetch
	TOS = SP - H
	TOS = MAR = TOS + 1
	PC = PC + 1; fetch
	H = MBRU << 8
	H = MBRU OR H
	MDR = SP + H + 1; wr
	MAR = SP = MDR
	MDR = OPC; wr
	MAR = SP = SP + 1
	MDR = LV; wr
	PC = PC + 1; fetch
	LV = TOS; goto main

ireturn = 0xAC:
	MAR = SP = LV; rd
	empty
	LV = MAR = MDR; rd
	MAR = LV + 1
	PC = MDR; rd; fetch
	MAR = SP
	LV = MDR
	MDR = TOS; wr
	Z = PC - 1; if (Z) goto mic1_exit; else goto main

ishl = 0x78:         # ishl: a << b
	MAR = SP = SP - 1; rd
	OPC = 1 << 8       # 256
	OPC = OPC >> 1     # 128
	OPC = OPC >> 1     # 64
	OPC = OPC >> 1     # 32
	OPC = H = OPC - 1  # 31
	OPC = H AND TOS    # 0x3F & b
	H = MDR            # a
ishl_while:
	H = MDR = MDR + H  # a <<= 1
	OPC = OPC - 1; if (Z) goto ishl_endwhile; else goto ishl_while  # --b || break
ishl_endwhile:
	TOS = MDR; wr      # return a
	goto main

ishr = 0x7A:
	MAR = SP = SP - 1; rd
	OPC = 1 << 8       # 256
	OPC = OPC >> 1     # 128
	OPC = OPC >> 1     # 64
	OPC = OPC >> 1     # 32
	H = OPC - 1  # 31
	TOS = H AND TOS    # 0x3F & b
	N = MDR; if (N) goto ishr_signbit; else goto ishr_branch
ishr_branch:
	goto iushr_while
ishr_signbit:
	H = 1 << 8
	H = H >> 1
	H = H << 8
	H = H << 8
	H = H << 8
ishr_while:
	MDR = MDR >> 1
	MDR = MDR OR H # if the ALU does logical shift, add a sign bit to make this arithmetic
	TOS = TOS - 1; if (Z) goto ishr_endwhile; else goto ishr_while # --b || break
ishr_endwhile:
	TOS = MDR; wr	
	goto main

iushr = 0x7C:				# iushr: a >> b, logical
	MAR = SP = SP - 1; rd
	OPC = 1 << 8       # 256
	OPC = OPC >> 1     # 128
	OPC = OPC >> 1     # 64
	OPC = OPC >> 1     # 32
	H = OPC - 1  # 31
	TOS = H AND TOS    # 0x3F & b
iushr_signbit:
	OPC = 1 << 8
	OPC = OPC >> 1
	OPC = OPC << 8
	OPC = OPC << 8
	OPC = OPC << 8
	H = OPC - 1
iushr_while:
	MDR = MDR >> 1
	MDR = MDR AND H # if the ALU does arithmetic shift, remove the sign bit to make this logical
	TOS = TOS - 1; if (Z) goto iushr_endwhile; else goto iushr_while # --b || break
iushr_endwhile:
	TOS = MDR; wr	
	goto main

mic1_exit:
	halt
